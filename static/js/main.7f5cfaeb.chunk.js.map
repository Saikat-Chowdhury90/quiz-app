{"version":3,"sources":["components/Questionaire.js","pages/MainPage.js","App.js","index.js"],"names":["Questionaire","showAnswers","submitAnswers","handlesubmitAnswer","handleAnswer","handleNextQuestion","data","question","correct_answer","answers","className","dangerouslySetInnerHTML","__html","map","answer","idx","bgColor","textColor","onClick","MainPage","useState","questions","setQuestions","currentIndex","setCurrentIndex","score","setScore","setshowAnswers","setsubmitAnswers","useEffect","quizData","results","incorrect_answers","sort","Math","random","length","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAqFeA,MAjFM,SAAC,GAOf,IANHC,EAME,EANFA,YACAC,EAKE,EALFA,cACAC,EAIE,EAJFA,mBACAC,EAGE,EAHFA,aACAC,EAEE,EAFFA,mBAEE,IADFC,KAAOC,EACL,EADKA,SAAUC,EACf,EADeA,eAAiBC,EAChC,EADgCA,QAKtC,OACA,gCACI,qBAAKC,UAAU,kDAAf,SACI,oBAAIA,UAAU,qBAAqBC,wBAAyB,CAACC,OAAOL,OAExE,qBAAKG,UAAU,uCAAf,SACGD,EAAQI,KAAI,SAACC,EAASC,GACrB,IAAMC,EAAWf,GAAeC,EAAiBY,IAAWN,EAAiB,eAC3E,aAAa,WAETS,EAAahB,GAAeC,EAAiB,aAAe,aAClE,OACE,mCACD,wBAEKQ,UAAS,WAAMM,EAAN,YAAiBC,EAAjB,8FACTC,QAAS,kBAAMd,EAAaU,IAHjC,SAIUA,GAHEC,UAejB,qBAAKL,UAAU,mCAAf,SACE,wBACEQ,QAASf,EACTO,UAAS,4IAFX,kBAOAT,GAAeC,GACZ,qBAAKQ,UAAU,mCAAf,SACA,wBAAQQ,QAASb,EACjBK,UAAS,4IADT,wBC4BMS,MA7Ef,WACE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAuCN,oBAAS,GAAhD,mBAAOnB,EAAP,KAAqB0B,EAArB,KACA,EAA2CP,oBAAS,GAApD,mBAAOlB,EAAP,KAAuB0B,EAAvB,KAkDI,OAhDJC,qBAAU,WAER,IAAMR,EAAYS,EAASC,QAAQlB,KAAI,SAACN,GAAD,mBAAC,eAEnCA,GAFkC,IAGrCE,QAAS,CACPF,EAASC,gBADF,mBAEJD,EAASyB,oBACZC,MAAK,kBAAMC,KAAKC,SAAW,WAG/Bb,EAAaD,KACZ,IAoCQA,EAAUe,OAAS,EAExB,qBAAK1B,UAAU,YAAf,SACGa,GAAgBF,EAAUe,OAE5B,qBAAI1B,UAAU,gCAAd,0BAA4De,EAA5D,gBAGD,cAAC,EAAD,CAAcnB,KAAMe,EAAUE,GAAerB,cAAeA,EAAeC,mBAZxD,WAC3ByB,GAAiB,IAW0GvB,mBAtBhG,WACtBH,IAEDyB,GAAe,GAEfH,EAAgBD,EAAa,KAiBkItB,YAAaA,EAAaG,aAvCxK,SAACU,IAIlBb,GAAeC,GAEdY,IAAWO,EAAUE,GAAcf,gBACpCkB,EAASD,EAAO,GAIlBE,GAAe,GACfC,GAAiB,QA8BX,oBAAIlB,UAAU,gCAAd,yBC7DO2B,EARH,WACV,OACE,mCACE,cAAC,EAAD,OCCNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.7f5cfaeb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Questionaire = ({\r\n    showAnswers,\r\n    submitAnswers,\r\n    handlesubmitAnswer,\r\n    handleAnswer,\r\n    handleNextQuestion,\r\n    data: {question, correct_answer , answers},\r\n}) => {\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n    <div className=\"bg-white text-black p-10 rounded-lg shadow-md  \">\r\n        <h2 className=\"font-bold text-2xl\" dangerouslySetInnerHTML={{__html:question}}/>\r\n    </div>\r\n    <div className=\"flex flex-wrap mt-4 justify-between \">\r\n      {answers.map((answer , idx) => {\r\n        const bgColor = (showAnswers && submitAnswers) ? answer === correct_answer ? 'bg-green-500'\r\n        : 'bg-red-500':'bg-white';\r\n\r\n        const textColor = (showAnswers && submitAnswers) ? 'text-white' : 'text-black';\r\n        return (\r\n          <>\r\n         <button\r\n                key={idx}\r\n              className={` ${bgColor} ${textColor} hover:border-4 hover:border-indigo-500/100 p-4  font-semibold rounded shadow w-5/12 mb-4 `}\r\n              onClick={() => handleAnswer(answer)}>\r\n                  {answer}\r\n          </button>\r\n\r\n         </>\r\n         );\r\n     })\r\n\r\n      }\r\n\r\n    \r\n\r\n    </div>\r\n    <div className=\"flex items-center justify-center\">\r\n      <button \r\n        onClick={handlesubmitAnswer}\r\n        className={` bg-black border-2 border-white hover:bg-white hover:text-black hover:border-black text-white p-4  font-semibold rounded  w-5/12 mt-10   `} >\r\n       OK\r\n          </button>\r\n        </div>\r\n        \r\n    {(showAnswers && submitAnswers) && (\r\n         <div className=\"flex items-center justify-center\">\r\n         <button onClick={handleNextQuestion}\r\n         className={` bg-black border-2 border-white hover:bg-white hover:text-black hover:border-black text-white p-4  font-semibold rounded  w-5/12 mt-10   `} >\r\n           Next\r\n         </button>\r\n         </div>\r\n     )\r\n        \r\n     \r\n     }\r\n\r\n        \r\n        \r\n      \r\n    \r\n</div>\r\n\r\n);\r\n};\r\n\r\nfunction  everydayIMShuffling(arr) \r\n{\r\n    for (let i = 0; i < arr.length; i++) {\r\n      const idx1 = Math.floor(Math.random() * arr.length);\r\n      const idx2 = Math.floor(Math.random() * arr.length);\r\n\r\n      \r\n\r\n      \r\n    }\r\n}\r\n\r\nexport default Questionaire;\r\n\r\n","import React,{useState , useEffect} from 'react';\r\nimport '../App.css';\r\nimport quizData from '../data/quiz.json';\r\nimport {Questionaire} from '../components';\r\n\r\nfunction MainPage() {\r\n  const [questions,setQuestions]= useState([]);\r\n  const [currentIndex, setCurrentIndex]=useState(0);\r\n  const [score , setScore] =useState(0);\r\n  const [showAnswers , setshowAnswers] = useState(false);\r\n  const [submitAnswers , setsubmitAnswers] = useState(false);\r\n \r\n  useEffect(() => {\r\n    \r\n    const questions = quizData.results.map((question) => \r\n    ({\r\n      ...question,\r\n      answers: [\r\n        question.correct_answer,\r\n        ...question.incorrect_answers\r\n      ].sort(() => Math.random() - 0.5),\r\n    })\r\n    )\r\n    setQuestions(questions);\r\n  }, []);\r\n\r\n  \r\n\r\n\r\nconst handleAnswer = (answer) => {\r\n\r\n  \r\n\r\nif(!showAnswers && submitAnswers)\r\n{\r\n  if(answer === questions[currentIndex].correct_answer){\r\n    setScore(score +1);\r\n  }\r\n}\r\n \r\n  setshowAnswers(true);\r\n  setsubmitAnswers(false);\r\n  \r\n\r\n};\r\n\r\nconst handleNextQuestion = () => {\r\n  if(submitAnswers)\r\n  {\r\n    setshowAnswers(false);\r\n\r\n    setCurrentIndex(currentIndex+1);\r\n  }\r\n  \r\n}\r\n\r\nconst handlesubmitAnswer = () => {\r\nsetsubmitAnswers(true);\r\n}\r\n\r\n      return questions.length > 0 ? (\r\n         \r\n        <div className=\"container\">\r\n          {currentIndex >= questions.length ? (\r\n             \r\n         <h1 className=\"text-3xl text-white font-bold\">You Scored : {score} out of 10</h1>\r\n        \r\n      ) :(\r\n        <Questionaire data={questions[currentIndex]} submitAnswers={submitAnswers} handlesubmitAnswer={handlesubmitAnswer} handleNextQuestion={handleNextQuestion} showAnswers={showAnswers} handleAnswer={handleAnswer} /> \r\n      )}\r\n      </div> ) : (\r\n        <h1 className=\"text-2xl text-white font-bold\">Loading...</h1>\r\n      );\r\n     \r\n      \r\n      \r\n    \r\n  \r\n};\r\n\r\n\r\n\r\nexport default MainPage;\r\n","import React from 'react';\r\nimport MainPage from './pages/MainPage';\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <MainPage/>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}